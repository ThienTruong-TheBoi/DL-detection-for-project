import torch
from sklearn.metrics import roc_curve, auc, accuracy_score, precision_score
import matplotlib.pyplot as plt

# Set random seed for reproducibility
torch.manual_seed(42)

def train(model, train_loader, criterion, optimizer, device):
    model.train()
    running_loss = 0.0

    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

    return running_loss / len(train_loader)

def evaluate(model, test_loader, device):
    model.eval()
    predictions = []
    true_labels = []

    with torch.no_grad():
        for inputs, labels in test_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            _, predicted = torch.max(outputs.data, 1)
            predictions.extend(predicted.cpu().numpy())
            true_labels.extend(labels.cpu().numpy())

    return predictions, true_labels

def generate_roc_curve(true_labels, predictions):
    fpr, tpr, _ = roc_curve(true_labels, predictions)
    roc_auc = auc(fpr, tpr)

    plt.figure()
    plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)
    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic')
    plt.legend(loc="lower right")
    plt.show()

def calculate_accuracy(true_labels, predictions):
    return accuracy_score(true_labels, predictions)

def calculate_precision(true_labels, predictions):
    return precision_score(true_labels, predictions)

def main():
    # Set up your dataset, model, optimizer, and other necessary components
    # ...

    # Training loop
    for epoch in range(num_epochs):
        train_loss = train(model, train_loader, criterion, optimizer, device)
        predictions, true_labels = evaluate(model, test_loader, device)

    # Generate ROC curve
    generate_roc_curve(true_labels, predictions)

    # Calculate accuracy and precision
    accuracy = calculate_accuracy(true_labels, predictions)
    precision = calculate_precision(true_labels, predictions)

    print(f"Accuracy: {accuracy}")
    print(f"Precision: {precision}")

if __name__ == '__main__':
    main()
